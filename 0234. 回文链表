/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {

        //时间：1ms，空间：42.4M
        //用快慢指针法，快指针实现二分法，慢指针进行反转
        public boolean isPalindrome(ListNode head) {
    	if(head == null || head.next == null) return true;
    	ListNode slow = head, fast = head.next, pre = null, prepre = null;
    	while(fast != null && fast.next != null) {//不确定链表长度为奇数或者偶数的二分条件
    		//反转前半段链表
    		pre = slow;
    		slow = slow.next;       //如果先反转，在移动指针会报错
    		fast = fast.next.next;
    		//先移动指针再来反转
    		pre.next = prepre;
    		prepre = pre;
    	}
    	ListNode p2 = slow.next;  //slow是n或者n+1处
    	slow.next = pre;
    	ListNode p1 = fast == null? slow.next : slow;//当回文数为奇数时，当回文数为偶数时，控制两边大小相等
    	while(p1 != null) {
    		if(p1.val != p2.val)
    			return false;
    		p1 = p1.next;
    		p2 = p2.next;
    	}
		return true;
    }

}
