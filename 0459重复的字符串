//1.将原字符串给出拷贝一遍组成新字符串；
//2.掐头去尾留中间；
//3.如果还包含原字符串，则满足题意。
方法一：算法，用时37ms,击败了66.24%
public boolean repeatedSubstringPattern(String s) {
		
	if(s==null || s.length()<2)return false;
        String str = s + s;
        return str.substring(1,str.length()-1).contains(s);
	}
  方法二：暴力求解法，用时134ms,击败了11.51% 
  public boolean repeatedSubstringPattern(String s) {
        // if(s==null||s.length()<2) return false;       
        // for(int i=0;i<(s.length()/2);i++){
        //     if(s.length()%(i+1)== 0 && s.split(s.substring(0,i+1)).length==0)
        //     return true;
        // }
        // return false;
        
    }
方法三：正则表达式。用时：50ms，击败了37.30%
public boolean repeatedSubstringPattern(String s) {
          return Pattern.matches("^(\\w+)\\1+$", s);
    }
